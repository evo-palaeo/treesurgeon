% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/treesurgeon.r
\name{sp_sorting}
\alias{sp_sorting}
\title{Species Sorting}
\usage{
sp_sorting(tree, x, anc = NULL, slices)
}
\arguments{
\item{tree}{an object of class 'phylo'.}

\item{x}{vector of tip values for species; names(x) should be the species names.}

\item{anc}{vector of internal node values. If not specified, these will be estimated using BM.}

\item{slices}{integer specifying the number of timeslices to use.}
}
\value{
Returns a data.frame "timeslice" containing the following columns:
\itemize{
\item time: time since root node. 
\item delta_x: mean change in trait x since previous timeslice.
\item delta_xa: anagenic component of delta_x.
\item delta_xe: extinction component of delta_x. 
\item delta_xc: cladogenic component of delta_x.
\item prop_xa: Proportion of total change in trait x since previous timeslice due to anagenesis.
\item prop_xe: Proportion of total change in trait x since previous timeslice due to extinction.
\item prop_xc: Proportion of total change in trait x since previous timeslice due to cladogenesis. 
\item x: Mean value of trait x.
\item xa: Mean value of trait x * prop_xa.
\item xe: Mean value of trait x * prop_xe.
\item xc: Mean value of trait x * prop_xc.
\item xac: Mean value of trait x * (prop_xc + prop_xa).
\item x_sd: Standard deviation of trait x. 
}
The function also produces a numeric vector "mean components" containing the mean values of prop_xa, prop_xe, prop_xc and prop_xac accross all timeslices.
}
\description{
Function that calculates the average change in a continuous trait through time for a given tree, and partitions this change into contributions from evolution and extinction.
}
\details{
This function expands on work by Quintero 2025. The calculation is as follows:

1) Divide the tree into timeslices and estimate ancestral trait values: 
\itemize{
\item At each point where a timeslice intersects a branch (edge) of the tree, estimate the ancestral value of the trait. This is done using the anc_timeslice() function.
}

2) Compute trait change per interval. For each time interval bounded by two timeslices (t0 and t1): \cr 
\itemize{
\item Compute the mean change in trait x. 
\item Δx = mean(x_t1) - mean(x_t2)
}
 
3) Identify edge types between timeslices:
\itemize{
\item Anagenetic edges: Present in both t0 and t1.
\item Cladogenetic edges: New edges appearing in t1 but not in t0. Pair each with its ancestral edge from t0.
\item Extinct edges: Present in t0 but missing in t1. Assign these a trait value at t1 equal to the mean of existing values at t1.
}

4) Calculate trait differences per edge pair: \cr
For each edge pair, calculate:
\itemize{
\item d = x_t1 - x_t0
\item Normalize these differences by dividing each d by the sum of all differences to get the proportion of total trait change attributed to each pair.
}

5) Sum the proportional contributions of:
\itemize{
\item Anagenesis: prop_xa
\item Cladogenesis: prop_xc
\item Extinction: prop_xe
}

6) Multiply the total mean trait change Δx by each of these proportions to compute:
\itemize{
\item Anagenetic change: Δxa = Δx * prop_xa
\item Cladogenic change: Δxc = Δx * prop_xc
\item Extinction-related change: Δxe = Δx * prop_xe
}

Interpretation:
A sudden shift in trait x reflects a rapid change in its mean value. A positive shift indicates an abrupt increase in the mean, while a negative shift signals a decrease. If this shift aligns in direction with a change in one of the evolutionary components (anagenesis, cladogenesis, or extinction), it suggests that the component significantly contributed to the shift. \cr
\itemize{
\item Extinction can drive sudden changes through species sorting—by selectively removing species from one end of the trait distribution, the mean shifts accordingly.
\item Cladogenesis can influence the mean by increasing the number of lineages at the extremes of the trait range, thereby pulling the average in that direction.
\item Anagenesis can produce a shift through consistent, directional evolution across all lineages over a short time period.
}
}
\examples{
set.seed(4)
tree <- sim_g_tree(b = 0.2, n = 10000, t = 200, ext = T, ext_t = 100, ext_s = 0.9)
tree$edge.length <- unlist(lapply(tree$edge.length, function(x) x + runif(1, 0, 1)))
tree$edge.length <- (tree$edge.length/max(node.depth.edgelength(tree))) * 100
tree <- keep.tip(tree, sample(1:Ntip(tree), 50))
tree <- ladderize(tree)
tree$edge.length <- (tree$edge.length/max(node.depth.edgelength(tree))) * 100
x <- fastBM(tree, a = 10, mu = 0.2)
par(mfrow = c(2, 1))
par(mar = c(2, 4.2, 0.5, 1))
phenogram(tree = tree, x, ftype = "off", xlab = "", ylab = "Trait_x")
res <- sp_sorting(tree, x, anc = NULL, 100)
par(mar = c(4.2, 4.2, 0.5, 1))
plot_range <- na.omit((unlist(res$timeslice[,9:13])))
plot(0:100, 0:100, type = "n", xlim = c(0, max(res$timeslice$time)), ylim = c(min(plot_range), max(plot_range)), xlab = "Time", ylab = "Trait_x")
lines(res$timeslice$time, res$timeslice$x, type = "l", col = "red")
lines(res$timeslice$time, res$timeslice$xac, type = "l", col = "blue")
lines(res$timeslice$time, res$timeslice$xe, type = "l", col = "orange")
legend("topleft", legend=c("x", "xac", "xe"), col=c("red", "blue", "orange"), lty=1, cex=0.8, box.lty=0, inset = 0.001)
par(mfrow = c(1, 1))
}
