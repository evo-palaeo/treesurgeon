% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/treesurgeon.r
\name{get_tip_priors}
\alias{get_tip_priors}
\title{get_tip_priors.}
\usage{
get_tip_priors(morph, extra_state = F)
}
\arguments{
\item{morph}{a character vector, list or data.frame coded in 'standard' format (e.g. morphological data).}

\item{extar_state}{logical. If TRUE, inapplicable codings ('-') will be treated as an additional state.}
}
\value{
A 'list' of numeric matrices of length n, where n is equal to the number of characters included in the input. Each matrix is size i * j, where i is the number of taxa and j is the number of states included in the nth character. Each cell represents the likelihood of observing state j in taxon i.
}
\description{
Function to extract tip priors for ancestral state estimation from a character vector, list or data.frame.
}
\details{
This function converts categorical characters, coded in 'standard' format (e.g. '0', '1', '2', '-', '?', '0/1') into a 2D tip prior matrix, or list of 2D tip prior matrices. These matrices can be used instead of character vectors in some ancestral state estimation functions (e.g. castor: asr_mk_model(), phytools: fitMk()). The function assigns equal prior probability to observing any state if data are coded as missing ('?') or inapplicable ('-'). If data are coded as polymorphic or uncertain between specified states (e.g. '0/1'. '(0 1)'), prior probability is divided equally between possible states. If extra_state is set to TRUE, inapplicable characters are considered an additional state. This may be useful when dealing with datasets that employ an atomised coding strategy in which absence / presence of a trait is coded seperately from the condition of the trait (e.g. red, blue). In these cases, the coding of 'inapplicable' in the condition character is logically equivalent to absent.
}
\examples{
## Load data
data(vert_data)
head(vert_data$morph)
## Convert secondary osteon character to tip priors, interpreting inapplicable ('-') as an additional state (i.e. absent).
tp <- get_tip_priors(vert_data$morph[,2], extra_state = T)
colnames(tp[[1]]) <- c("bone absent", "secondary osteons absent", "secondary osteons present")
## conduct ancestral state analysis using phytools.
fitER <- fitMk(tree = vert_data, x = tp[[1]], model = "ER")
plot(ancr(fitER), legend = "topleft")
}
